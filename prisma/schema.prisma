generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  currencyId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  currency Currency @relation("CountryCurrency", fields: [currencyId], references: [id])
  clients  Client[] @relation("ClientCountry")

  @@map("countries")
}

model Currency {
  id            String   @id @default(cuid())
  name          String   @unique
  code          String   @unique
  symbol        String
  decimalPlaces Int      @default(2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  countries Country[] @relation("CountryCurrency")
  clients   Client[] @relation("ClientCurrency")

  @@map("currencies")
}

model Client {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  domain     String?
  email      String
  phone      String?
  address    String?
  logo       String?
  countryId  String?
  currencyId String?
  isActive   Boolean  @default(true)
  plan       Plan     @default(STARTER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  country  Country? @relation("ClientCountry", fields: [countryId], references: [id])
  currency Currency? @relation("ClientCurrency", fields: [currencyId], references: [id])
  users    User[] @relation("ClientUsers")
  products Product[] @relation("ClientProducts")
  settings ClientSettings? @relation("ClientSettings")

  @@map("clients")
}

model ClientSettings {
  id                 String   @id @default(cuid())
  clientId           String   @unique
  companyName        String
  email              String
  phone              String?
  address            String?
  timezone           String   @default("America/New_York")
  lowStockThreshold  Int      @default(10)
  autoReorder        Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  client Client @relation("ClientSettings", fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_settings")
}

model User {
  id        String   @id @default(cuid())
  email     String
  password  String
  name      String?
  role      Role     @default(ADMIN)
  clientId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client Client? @relation("ClientUsers", fields: [clientId], references: [id])

  @@unique([email, clientId])
  @@map("users")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  sku          String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  category     String
  categoryId   String?
  variations   Json?
  stockLevel   Int      @default(0)
  minStock     Int      @default(0)
  isActive     Boolean  @default(true)
  clientId     String
  media        Json?
  images       Json?
  videos       Json?
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  client     Client @relation("ClientProducts", fields: [clientId], references: [id])
  categories ProductCategory[] @relation("ProductCategories")

  @@unique([sku, clientId])
  @@map("products")
}

model InventoryHistory {
  id        String        @id @default(cuid())
  productId String
  quantity  Int
  type      InventoryType
  reason    String?
  userId    String?
  clientId  String
  createdAt DateTime      @default(now())

  @@map("inventory_history")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  clientId    String
  parentId    String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referential relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryHierarchy")

  // Product relations
  products ProductCategory[] @relation("CategoryProducts")

  @@unique([name, clientId, parentId])
  @@map("categories")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  product  Product  @relation("ProductCategories", fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum Plan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum InventoryType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  DAMAGE
  TRANSFER
}
