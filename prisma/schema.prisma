generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  currencyId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clients    Client[] @relation("ClientCountry")
  currency   Currency @relation("CountryCurrency", fields: [currencyId], references: [id])

  @@map("countries")
}

model Currency {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String    @unique
  symbol        String
  decimalPlaces Int       @default(2)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clients       Client[]  @relation("ClientCurrency")
  countries     Country[] @relation("CountryCurrency")

  @@map("currencies")
}

model Client {
  id               String             @id @default(cuid())
  name             String
  slug             String             @unique
  domain           String?
  email            String
  phone            String?
  address          String?
  logo             String?
  countryId        String?
  currencyId       String?
  isActive         Boolean            @default(true)
  plan             Plan               @default(STARTER)
  guestPassword    String?
  guestAccessEnabled Boolean          @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  apiKeys          ApiKey[]           @relation("ClientApiKeys")
  categories       Category[]         @relation("ClientCategories")
  settings         ClientSettings?    @relation("ClientSettings")
  country          Country?           @relation("ClientCountry", fields: [countryId], references: [id])
  currency         Currency?          @relation("ClientCurrency", fields: [currencyId], references: [id])
  inventoryHistory InventoryHistory[] @relation("ClientInventoryHistory")
  products         Product[]          @relation("ClientProducts")
  users            User[]             @relation("ClientUsers")

  @@map("clients")
}

model ClientSettings {
  id                 String   @id @default(cuid())
  clientId           String   @unique
  companyName        String
  email              String
  phone              String?
  address            String?
  timezone           String   @default("America/New_York")
  lowStockThreshold  Int      @default(10)
  autoReorder        Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  client             Client   @relation("ClientSettings", fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_settings")
}

model User {
  id               String             @id @default(cuid())
  email            String
  password         String
  name             String?
  role             Role               @default(ADMIN)
  clientId         String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  inventoryHistory InventoryHistory[] @relation("UserInventoryHistory")
  client           Client?            @relation("ClientUsers", fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([email, clientId])
  @@map("users")
}

model Product {
  id               String             @id @default(cuid())
  name             String
  sku              String
  description      String?
  price            Decimal            @db.Decimal(10, 2)
  category         String
  categoryId       String?
  variations       Json?
  stockLevel       Int                @default(0)
  minStock         Int                @default(0)
  isActive         Boolean            @default(true)
  clientId         String
  images           Json?
  videos           Json?
  thumbnailUrl     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  allowPreorder    Boolean            @default(false)
  inventoryHistory InventoryHistory[] @relation("ProductInventoryHistory")
  media            Media[]            @relation("DirectProductMedia")
  productMedia     ProductMedia[]     @relation("ProductMediaRelations")
  categories       ProductCategory[]  @relation("ProductCategories")
  client           Client             @relation("ClientProducts", fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([sku, clientId])
  @@map("products")
}

model InventoryHistory {
  id        String        @id @default(cuid())
  productId String
  quantity  Int
  type      InventoryType
  reason    String?
  userId    String?
  clientId  String
  createdAt DateTime      @default(now())
  client    Client        @relation("ClientInventoryHistory", fields: [clientId], references: [id], onDelete: Cascade)
  product   Product       @relation("ProductInventoryHistory", fields: [productId], references: [id])
  user      User?         @relation("UserInventoryHistory", fields: [userId], references: [id])

  @@map("inventory_history")
}

model Category {
  id          String            @id @default(cuid())
  name        String
  description String?
  isActive    Boolean           @default(true)
  clientId    String
  parentId    String?
  sortOrder   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  client      Client            @relation("ClientCategories", fields: [clientId], references: [id], onDelete: Cascade)
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[]        @relation("CategoryHierarchy")
  products    ProductCategory[] @relation("CategoryProducts")

  @@unique([name, clientId, parentId])
  @@map("categories")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation("ProductCategories", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model ProductMedia {
  id        String   @id @default(cuid())
  productId String
  mediaId   String
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  media     Media    @relation("MediaProductRelations", fields: [mediaId], references: [id], onDelete: Cascade)
  product   Product  @relation("ProductMediaRelations", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, mediaId])
  @@map("product_media")
}

model Media {
  id             String          @id @default(cuid())
  productId      String?
  kind           String
  s3Key          String
  originalName   String
  mimeType       String
  fileSize       Int
  width          Int?
  height         Int?
  durationMs     Int?
  altText        String?
  caption        String?
  sortOrder      Int             @default(0)
  isPrimary      Boolean         @default(false)
  status         String          @default("pending")
  error          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageEmbedding ImageEmbedding? @relation("ImageEmbedding")
  products       Product?        @relation("DirectProductMedia", fields: [productId], references: [id], onDelete: Cascade)
  productMedia   ProductMedia[]  @relation("MediaProductRelations")
  videoFrames    VideoFrame[]    @relation("VideoFrames")

  @@map("media")
}

model PerformanceMetrics {
  id                  String   @id @default(cuid())
  url                 String
  timestamp           DateTime
  fcp                 Float?
  lcp                 Float?
  fid                 Float?
  cls                 Float?
  ttfb                Float?
  fmp                 Float?
  tti                 Float?
  userAgent           String?
  connectionType      String?
  deviceMemory        Int?
  hardwareConcurrency Int?
  createdAt           DateTime @default(now())

  @@map("performance_metrics")
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  secret      String?
  clientId    String
  isActive    Boolean   @default(true)
  permissions String[]  @default([])
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation("ClientApiKeys", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([key])
  @@map("api_keys")
}

model ImageEmbedding {
  id        String                @id @default(cuid())
  mediaId   String                @unique
  embedding Unsupported("vector")
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  media     Media                 @relation("ImageEmbedding", fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("image_embeddings")
}

model VideoFrame {
  id         String          @id @default(cuid())
  mediaId    String
  frameS3Key String
  tsMs       Int
  width      Int?
  height     Int?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  embeddings FrameEmbedding?
  media      Media           @relation("VideoFrames", fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("video_frames")
}

model FrameEmbedding {
  id        String                @id @default(cuid())
  frameId   String                @unique
  embedding Unsupported("vector")
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  frame     VideoFrame            @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@map("frame_embeddings")
}

enum Role {
  MASTER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum Plan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum InventoryType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  DAMAGE
  TRANSFER
}
