// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant SaaS Platform Models
model Client {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // For subdomain routing
  domain      String?  // Custom domain support
  email       String
  phone       String?
  address     String?
  logo        String?  // Logo URL
  isActive    Boolean  @default(true)
  plan        Plan     @default(STARTER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  products    Product[]
  categories  Category[]
  settings    ClientSettings?
  inventoryHistory InventoryHistory[]

  @@map("clients")
}

model ClientSettings {
  id                  String   @id @default(cuid())
  clientId            String   @unique
  companyName         String
  email               String
  phone               String?
  address             String?
  currency            String   @default("USD")
  timezone            String   @default("America/New_York")
  lowStockThreshold   Int      @default(10)
  autoReorder         Boolean  @default(false)
  emailNotifications  Boolean  @default(true)
  smsNotifications    Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_settings")
}

model User {
  id        String   @id @default(cuid())
  email     String
  password  String
  name      String?
  role      Role     @default(ADMIN)
  clientId  String?  // Null for super admin users
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client           Client?           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  inventoryHistory InventoryHistory[]

  // Ensure email is unique within a client (or globally for super admins)
  @@unique([email, clientId])
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String   // Keep for backward compatibility
  categoryId  String?  // New foreign key to categories table
  variations  Json?    // Store product variations as JSON
  stockLevel  Int      @default(0)
  minStock    Int      @default(0)
  isActive    Boolean  @default(true)
  clientId    String   // Required for multi-tenancy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client           Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  inventoryHistory InventoryHistory[]
  categoryRef      Category?         @relation(fields: [categoryId], references: [id])

  // Ensure SKU is unique within a client
  @@unique([sku, clientId])
  @@map("products")
}

model InventoryHistory {
  id          String   @id @default(cuid())
  productId   String
  quantity    Int      // Positive for additions, negative for subtractions
  type        InventoryType
  reason      String?
  userId      String?
  clientId    String   // For tenant isolation
  createdAt   DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("inventory_history")
}


model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  clientId    String   // Required for multi-tenancy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  products Product[]

  // Ensure category name is unique within a client
  @@unique([name, clientId])
  @@map("categories")
}

enum Role {
  SUPER_ADMIN  // Platform administrators
  ADMIN        // Client administrators
  MANAGER      // Client managers
  USER         // Client users
}

enum Plan {
  STARTER      // Basic plan
  PROFESSIONAL // Professional plan
  ENTERPRISE   // Enterprise plan
}

enum InventoryType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  DAMAGE
  TRANSFER
}
